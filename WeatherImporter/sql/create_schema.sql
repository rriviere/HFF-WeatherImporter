/* app user */
GRANT ALL PRIVILEGES ON *.* TO hffapp@localhost
IDENTIFIED BY 'hffapp' WITH GRANT OPTION;

/* drop procedures */
DROP PROCEDURE IF EXISTS HFF_AREA_RETRIEVE_PROC;
DROP PROCEDURE IF EXISTS HFF_GET_WEATHER_FORECAST_PROC;
DROP PROCEDURE IF EXISTS HFF_GET_WEATHER_AREA_PROC;

/* drop tables */
DROP TABLE IF EXISTS HFF_WEATHER_FORECAST_DETAIL;
DROP TABLE IF EXISTS HFF_WEATHER_FORECAST_HEAD;
DROP TABLE IF EXISTS HFF_WEATHER_AREA;
DROP TABLE IF EXISTS HFF_WEATHER_IMPORT_STG;
DROP TABLE IF EXISTS HFF_WEATHER_IMPORT_CATALOG;
DROP TABLE IF EXISTS HFF_BATCH_LOG;

DROP TABLE IF EXISTS HFF_WEATHER_AREA_AU;
DROP TABLE IF EXISTS HFF_WEATHER_FORECAST_HEAD_AU;
DROP TABLE IF EXISTS HFF_WEATHER_FORECAST_DETAIL_AU;

/* drop triggers */
DROP TRIGGER WA_AU_INSERT_TR;
DROP TRIGGER WA_AU_UPDATE_TR;
DROP TRIGGER WA_AU_DELETE_TR;

DROP TRIGGER WFH_AU_INSERT_TR;
DROP TRIGGER WFH_AU_UPDATE_TR;
DROP TRIGGER WFH_AU_DELETE_TR;

DROP TRIGGER WFD_AU_INSERT_TR;
DROP TRIGGER WFD_AU_UPDATE_TR;
DROP TRIGGER WFD_AU_DELETE_TR;

/* create tables */
CREATE TABLE HFF_WEATHER_AREA
(
  AREA                 VARCHAR(50),
  DESCRIPTION          VARCHAR(500),
  TYPE                 VARCHAR(100),
  PARENT_AREA          VARCHAR(50),
  LAST_MODIFIED_USER   VARCHAR(100), 
  LAST_UPDATE_DATETIME TIMESTAMP 
);
ALTER TABLE HFF_WEATHER_AREA 
  ADD (CONSTRAINT HFF_WA_WA_PK PRIMARY KEY (AREA));
ALTER TABLE HFF_WEATHER_AREA 
  ADD (CONSTRAINT HFF_WA_WA_FK1 FOREIGN KEY (PARENT_AREA) REFERENCES HFF_WEATHER_AREA (AREA));
  
CREATE TABLE HFF_WEATHER_FORECAST_HEAD
(
  START_TIME_LOCAL     TIMESTAMP,
  END_TIME_LOCAL       TIMESTAMP,
  TIME_ZONE            VARCHAR(100),
  AREA                 VARCHAR(50),
  LAST_MODIFIED_USER   VARCHAR(100), 
  LAST_UPDATE_DATETIME TIMESTAMP 
);
ALTER TABLE HFF_WEATHER_FORECAST_HEAD 
  ADD (CONSTRAINT HFF_WFH_PK PRIMARY KEY (START_TIME_LOCAL,END_TIME_LOCAL,TIME_ZONE,AREA));
  
ALTER TABLE HFF_WEATHER_FORECAST_HEAD 
  ADD (CONSTRAINT HFF_WFH_WA_FK1 FOREIGN KEY (AREA) REFERENCES HFF_WEATHER_AREA (AREA));
  
CREATE TABLE HFF_WEATHER_FORECAST_DETAIL
(
  ELEMENT_NAME             VARCHAR(100),
  ELEMENT_UNIT             VARCHAR(100),
  ELEMENT_VALUE            VARCHAR(500),
  START_TIME_LOCAL         TIMESTAMP,
  END_TIME_LOCAL           TIMESTAMP,
  TIME_ZONE                VARCHAR(100),
  AREA                     VARCHAR(50),
  LAST_MODIFIED_USER       VARCHAR(100), 
  LAST_UPDATE_DATETIME     TIMESTAMP 
);
ALTER TABLE HFF_WEATHER_FORECAST_DETAIL
  ADD (CONSTRAINT HFF_WFD_PK PRIMARY KEY (
    ELEMENT_NAME, 
  	ELEMENT_VALUE,
    START_TIME_LOCAL,
    END_TIME_LOCAL,
    TIME_ZONE,
    AREA));  
ALTER TABLE HFF_WEATHER_FORECAST_DETAIL 
  ADD (CONSTRAINT HFF_WFD_WFH_FK1 FOREIGN KEY (START_TIME_LOCAL,END_TIME_LOCAL,TIME_ZONE,AREA)
  REFERENCES HFF_WEATHER_FORECAST_HEAD (START_TIME_LOCAL,END_TIME_LOCAL,TIME_ZONE,AREA));

CREATE TABLE HFF_WEATHER_IMPORT_CATALOG 
(
  PRODUCT_ID VARCHAR(50),
  DESCRIPTION VARCHAR(500)
);
ALTER TABLE HFF_WEATHER_IMPORT_CATALOG 
  ADD (CONSTRAINT HFF_WIC_PID_PK PRIMARY KEY (PRODUCT_ID));


CREATE TABLE HFF_WEATHER_IMPORT_STG
(
  WEATHER_STAGE_ID       MEDIUMINT NOT NULL AUTO_INCREMENT,
  PRODUCT_ID             VARCHAR(50),
  DOCUMENT               MEDIUMTEXT,
  CREATE_DATE            TIMESTAMP NULL,
  PROCESSED_DATETIME     TIMESTAMP NULL,
  PRIMARY KEY HFF_WIS_PK (WEATHER_STAGE_ID)
);    
ALTER TABLE HFF_WEATHER_IMPORT_STG
  ADD (CONSTRAINT HFF_WIS_WIC_FK1 FOREIGN KEY (PRODUCT_ID) REFERENCES HFF_WEATHER_IMPORT_CATALOG (PRODUCT_ID));
  
CREATE TABLE HFF_BATCH_LOG
(
  LOG_ID               BIGINT NOT NULL AUTO_INCREMENT,
  JOB_NAME             VARCHAR(100),
  ERROR                VARCHAR(1000),
  START_DATETIME       TIMESTAMP, 
  END_DATETIME         TIMESTAMP,
  PRIMARY KEY HFF_BL_BLID_PK (LOG_ID)
);

CREATE TABLE HFF_WEATHER_AREA_AU
(
  AREA                     VARCHAR(50),
  NEW_DESCRIPTION          VARCHAR(500),
  OLD_DESCRIPTION          VARCHAR(500),
  NEW_TYPE                 VARCHAR(100),
  OLD_TYPE                 VARCHAR(100),
  NEW_PARENT_AREA          VARCHAR(50),
  OLD_PARENT_AREA          VARCHAR(50),
  NEW_LAST_MODIFIED_USER   VARCHAR(100), 
  OLD_LAST_MODIFIED_USER   VARCHAR(100),
  NEW_LAST_UPDATE_DATETIME TIMESTAMP,
  OLD_LAST_UPDATE_DATETIME TIMESTAMP,
  CHANGE_TYPE              enum('I','U','D') NOT NULL,
  MODIFY_DATE              DATETIME,
  MODIFY_USER              VARCHAR(100)
);

CREATE TABLE HFF_WEATHER_FORECAST_HEAD_AU
(
  START_TIME_LOCAL         TIMESTAMP,
  END_TIME_LOCAL           TIMESTAMP,
  TIME_ZONE                VARCHAR(100),
  AREA                     VARCHAR(50),
  NEW_LAST_MODIFIED_USER   VARCHAR(100), 
  OLD_LAST_MODIFIED_USER   VARCHAR(100), 
  NEW_LAST_UPDATE_DATETIME TIMESTAMP,
  OLD_LAST_UPDATE_DATETIME TIMESTAMP,
  CHANGE_TYPE              enum('I','U','D') NOT NULL,
  MODIFY_DATE              DATETIME,
  MODIFY_USER              VARCHAR(100)  
);

CREATE TABLE HFF_WEATHER_FORECAST_DETAIL_AU
(
  ELEMENT_NAME                VARCHAR(100),
  ELEMENT_UNIT                VARCHAR(100),
  ELEMENT_VALUE               VARCHAR(500),
  START_TIME_LOCAL            TIMESTAMP,
  END_TIME_LOCAL              TIMESTAMP,
  TIME_ZONE                   VARCHAR(100),
  AREA                        VARCHAR(50),
  NEW_LAST_MODIFIED_USER      VARCHAR(100), 
  OLD_LAST_MODIFIED_USER      VARCHAR(100),
  NEW_LAST_UPDATE_DATETIME    TIMESTAMP,
  OLD_LAST_UPDATE_DATETIME    TIMESTAMP,
  CHANGE_TYPE                 enum('I','U','D') NOT NULL,
  MODIFY_DATE                 DATETIME,
  MODIFY_USER                 VARCHAR(100)  
);


/* create triggers */
CREATE TRIGGER `WA_AU_INSERT_TR` AFTER INSERT
    ON HFF_WEATHER_AREA
    FOR EACH ROW BEGIN
    
    SET @changetype = 'I';
    INSERT INTO HFF_WEATHER_AREA_AU
    ( AREA,
      NEW_DESCRIPTION,
      NEW_TYPE,
      NEW_PARENT_AREA,
      NEW_LAST_MODIFIED_USER, 
      NEW_LAST_UPDATE_DATETIME,
      CHANGE_TYPE,
      MODIFY_DATE,
      MODIFY_USER) 
    VALUES
    ( NEW.AREA,
      NEW.DESCRIPTION,
      NEW.TYPE,
      NEW.PARENT_AREA,
      NEW.LAST_MODIFIED_USER, 
      NEW.LAST_UPDATE_DATETIME,
      @changetype,
      NOW(),
      USER()
    );
END;

CREATE TRIGGER `WA_AU_UPDATE_TR` AFTER UPDATE
    ON HFF_WEATHER_AREA
    FOR EACH ROW BEGIN
    SET @changetype = 'U';
    INSERT INTO HFF_WEATHER_AREA_AU
    ( AREA,
      NEW_DESCRIPTION,
      OLD_DESCRIPTION,
      NEW_TYPE,
      OLD_TYPE,
      NEW_PARENT_AREA,
      OLD_PARENT_AREA,
      NEW_LAST_MODIFIED_USER, 
      OLD_LAST_MODIFIED_USER,
      NEW_LAST_UPDATE_DATETIME,
      OLD_LAST_UPDATE_DATETIME,
      CHANGE_TYPE,
      MODIFY_DATE,
      MODIFY_USER) 
    VALUES
    ( NEW.AREA,
      NEW.DESCRIPTION,
      OLD.DESCRIPTION,
      NEW.TYPE,
      OLD.TYPE,
      NEW.PARENT_AREA,
      OLD.PARENT_AREA,
      NEW.LAST_MODIFIED_USER, 
      OLD.LAST_MODIFIED_USER,
      NEW.LAST_UPDATE_DATETIME,
      OLD.LAST_UPDATE_DATETIME,
      @changetype,
      NOW(),
      USER()
    );
END;

CREATE TRIGGER `WA_AU_DELETE_TR` AFTER DELETE
    ON HFF_WEATHER_AREA
    FOR EACH ROW BEGIN
    SET @changetype = 'D';
    INSERT INTO HFF_WEATHER_AREA_AU
    ( AREA,
      NEW_DESCRIPTION,
      NEW_TYPE,
      NEW_PARENT_AREA,
      NEW_LAST_MODIFIED_USER, 
      NEW_LAST_UPDATE_DATETIME,
      CHANGE_TYPE,
      MODIFY_DATE,
      MODIFY_USER) 
    VALUES
    ( OLD.AREA,
      OLD.DESCRIPTION,
      OLD.TYPE,
      OLD.PARENT_AREA,
      OLD.LAST_MODIFIED_USER, 
      OLD.LAST_UPDATE_DATETIME,
      @changetype,
      NOW(),
      USER()
    );
END;

CREATE TRIGGER `WFH_AU_INSERT_TR` AFTER INSERT
    ON HFF_WEATHER_FORECAST_HEAD
    FOR EACH ROW BEGIN
    
    SET @changetype = 'I';
    INSERT INTO HFF_WEATHER_FORECAST_HEAD_AU
    ( START_TIME_LOCAL,
      END_TIME_LOCAL,
      TIME_ZONE,
      AREA,
      NEW_LAST_MODIFIED_USER, 
      NEW_LAST_UPDATE_DATETIME,
      CHANGE_TYPE,
      MODIFY_DATE,
      MODIFY_USER)       
    VALUES
    ( NEW.START_TIME_LOCAL,
      NEW.END_TIME_LOCAL,
      NEW.TIME_ZONE,
      NEW.AREA,
      NEW.LAST_MODIFIED_USER, 
      NEW.LAST_UPDATE_DATETIME,
      @changetype,
      NOW(),
      USER()
    );
END;

CREATE TRIGGER `WFH_AU_UPDATE_TR` AFTER UPDATE
    ON HFF_WEATHER_FORECAST_HEAD
    FOR EACH ROW BEGIN
    
    SET @changetype = 'U';
    INSERT INTO HFF_WEATHER_FORECAST_HEAD_AU
    ( START_TIME_LOCAL,
      END_TIME_LOCAL,
      TIME_ZONE,
      AREA,
      NEW_LAST_MODIFIED_USER, 
      OLD_LAST_MODIFIED_USER,
      NEW_LAST_UPDATE_DATETIME,
      OLD_LAST_UPDATE_DATETIME,
      CHANGE_TYPE,
      MODIFY_DATE,
      MODIFY_USER)       
    VALUES
    ( NEW.START_TIME_LOCAL,
      NEW.END_TIME_LOCAL,
      NEW.TIME_ZONE,
      NEW.AREA,
      NEW.LAST_MODIFIED_USER, 
      OLD.LAST_MODIFIED_USER,
      NEW.LAST_UPDATE_DATETIME,
      OLD.LAST_UPDATE_DATETIME,
      @changetype,
      NOW(),
      USER()
    );
END;

CREATE TRIGGER `WFH_AU_DELETE_TR` AFTER DELETE
    ON HFF_WEATHER_FORECAST_HEAD
    FOR EACH ROW BEGIN
    
    SET @changetype = 'D';
    INSERT INTO HFF_WEATHER_FORECAST_HEAD_AU
    ( START_TIME_LOCAL,
      END_TIME_LOCAL,
      TIME_ZONE,
      AREA,
      NEW_LAST_MODIFIED_USER, 
      NEW_LAST_UPDATE_DATETIME,
      CHANGE_TYPE,
      MODIFY_DATE,
      MODIFY_USER)       
    VALUES
    ( OLD.START_TIME_LOCAL,
      OLD.END_TIME_LOCAL,
      OLD.TIME_ZONE,
      OLD.AREA,
      OLD.LAST_MODIFIED_USER, 
      OLD.LAST_UPDATE_DATETIME,
      @changetype,
      NOW(),
      USER()
    );
END;

CREATE TRIGGER `WFD_AU_INSERT_TR` AFTER INSERT
    ON HFF_WEATHER_FORECAST_DETAIL
    FOR EACH ROW BEGIN
    
    SET @changetype = 'I';
    INSERT INTO HFF_WEATHER_FORECAST_DETAIL_AU
    ( ELEMENT_NAME,
      ELEMENT_UNIT,
      ELEMENT_VALUE,
      START_TIME_LOCAL,
      END_TIME_LOCAL,
      TIME_ZONE,
      AREA,
      NEW_LAST_MODIFIED_USER, 
      NEW_LAST_UPDATE_DATETIME,
      CHANGE_TYPE,
      MODIFY_DATE,
      MODIFY_USER ) 
    VALUES
    ( NEW.ELEMENT_NAME,
      NEW.ELEMENT_UNIT,
      NEW.ELEMENT_VALUE,
      NEW.START_TIME_LOCAL,
      NEW.END_TIME_LOCAL,
      NEW.TIME_ZONE,
      NEW.AREA,
      NEW.LAST_MODIFIED_USER, 
      NEW.LAST_UPDATE_DATETIME,
      @changetype,
      NOW(),
      USER()
    );
END;

CREATE TRIGGER `WFD_AU_UPDATE_TR` AFTER UPDATE
    ON HFF_WEATHER_FORECAST_DETAIL
    FOR EACH ROW BEGIN
    
    SET @changetype = 'U';
    INSERT INTO HFF_WEATHER_FORECAST_DETAIL_AU
    ( ELEMENT_NAME,
      ELEMENT_UNIT,
      ELEMENT_VALUE,
      START_TIME_LOCAL,
      END_TIME_LOCAL,
      TIME_ZONE,
      AREA,
      NEW_LAST_MODIFIED_USER, 
      OLD_LAST_MODIFIED_USER,
      NEW_LAST_UPDATE_DATETIME,
      OLD_LAST_UPDATE_DATETIME,
      CHANGE_TYPE,
      MODIFY_DATE,
      MODIFY_USER ) 
    VALUES
    ( NEW.ELEMENT_NAME,
      NEW.ELEMENT_UNIT,
      NEW.ELEMENT_VALUE,
      NEW.START_TIME_LOCAL,
      NEW.END_TIME_LOCAL,
      NEW.TIME_ZONE,
      NEW.AREA,
      NEW.LAST_MODIFIED_USER, 
      OLD.LAST_MODIFIED_USER,
      NEW.LAST_UPDATE_DATETIME,
      OLD.LAST_UPDATE_DATETIME,
      @changetype,
      NOW(),
      USER()
    );
END;

CREATE TRIGGER `WFD_AU_DELETE_TR` AFTER DELETE
    ON HFF_WEATHER_FORECAST_DETAIL
    FOR EACH ROW BEGIN
    
    SET @changetype = 'D';
    INSERT INTO HFF_WEATHER_FORECAST_DETAIL_AU
    ( ELEMENT_NAME,
      ELEMENT_UNIT,
      ELEMENT_VALUE,
      START_TIME_LOCAL,
      END_TIME_LOCAL,
      TIME_ZONE,
      AREA,
      OLD_LAST_MODIFIED_USER,
      OLD_LAST_UPDATE_DATETIME,
      CHANGE_TYPE,
      MODIFY_DATE,
      MODIFY_USER ) 
    VALUES
    ( OLD.ELEMENT_NAME,
      OLD.ELEMENT_UNIT,
      OLD.ELEMENT_VALUE,
      OLD.START_TIME_LOCAL,
      OLD.END_TIME_LOCAL,
      OLD.TIME_ZONE,
      OLD.AREA,
      OLD.LAST_MODIFIED_USER,
      OLD.LAST_UPDATE_DATETIME,
      @changetype,
      NOW(),
      USER()
    );
END;

/* create procedures */
CREATE PROCEDURE hff.`hff_get_weather_area_proc`(IN I_area_code VARCHAR(50))
COMMENT 'Procedure to return area to Java'
BEGIN
  SELECT * 
  FROM hff_weather_area where area=IFNULL(i_area_code,area);
END;

CREATE PROCEDURE hff.`hff_get_weather_forecast_proc`(IN I_area_code VARCHAR(50), IN I_date VARCHAR(50))
    COMMENT 'Procedure to return forecast to Java'
BEGIN
  SELECT 
     wet_det.start_time_local,
     wet_det.end_time_local,
     wet_det.time_zone,
     wet_det.area,
     wet_det.element_name,
     wet_det.element_unit,
     wet_det.element_value
  FROM (
    SELECT h.start_time_local,h.end_time_local,h.time_zone,h.area,d.element_name,d.element_unit,d.element_value
    FROM hff_weather_forecast_head h, hff_weather_forecast_detail d
    WHERE h.area = d.area
    AND h.start_time_local=d.start_time_local
    AND h.end_time_local=d.end_time_local
    AND h.time_zone=d.time_zone
    AND h.area=I_area_code
    AND DATE_FORMAT(h.start_time_local, '%Y-%m-%d')=STR_TO_DATE(I_date, '%d-%m-%Y' ) ) wet_det
  GROUP BY wet_det.start_time_local,wet_det.end_time_local,wet_det.area;
END;

/* init ddl */
insert into hff_weather_import_catalog values ('IDV10701','Geelong and Surf Coast');

COMMIT;

